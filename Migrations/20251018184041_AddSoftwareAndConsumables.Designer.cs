// <auto-generated />
using System;
using Asset.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Asset.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251018184041_AddSoftwareAndConsumables")]
    partial class AddSoftwareAndConsumables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Asset.Models.AssetActionType", b =>
                {
                    b.Property<int>("ActionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionTypeId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActionTypeId");

                    b.ToTable("AssetActionTypes");

                    b.HasData(
                        new
                        {
                            ActionTypeId = 1,
                            Description = "Asset maintenance performed",
                            Name = "Maintenance"
                        },
                        new
                        {
                            ActionTypeId = 2,
                            Description = "Asset assigned to a different user",
                            Name = "User Change"
                        },
                        new
                        {
                            ActionTypeId = 3,
                            Description = "Replaced a part of the asset",
                            Name = "Spare Part Replacement"
                        },
                        new
                        {
                            ActionTypeId = 4,
                            Description = "New asset assignment",
                            Name = "Assignment"
                        },
                        new
                        {
                            ActionTypeId = 5,
                            Description = "Hardware component added to asset",
                            Name = "Hardware Addition"
                        },
                        new
                        {
                            ActionTypeId = 6,
                            Description = "Hardware component removed from asset",
                            Name = "Hardware Removal"
                        },
                        new
                        {
                            ActionTypeId = 7,
                            Description = "Asset returned to IT department",
                            Name = "Return to IT"
                        },
                        new
                        {
                            ActionTypeId = 8,
                            Description = "Asset permanently retired from service",
                            Name = "Retired"
                        },
                        new
                        {
                            ActionTypeId = 9,
                            Description = "Asset transferred to different location",
                            Name = "Transfer"
                        },
                        new
                        {
                            ActionTypeId = 10,
                            Description = "Asset repair work performed",
                            Name = "Repair"
                        },
                        new
                        {
                            ActionTypeId = 11,
                            Description = "Asset upgraded with new components",
                            Name = "Upgrade"
                        },
                        new
                        {
                            ActionTypeId = 12,
                            Description = "Asset deployed to user",
                            Name = "Deployment"
                        });
                });

            modelBuilder.Entity("Asset.Models.AssetStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("AssetStatuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            Description = "Asset currently in use",
                            Name = "Active"
                        },
                        new
                        {
                            StatusId = 2,
                            Description = "Not in use but available",
                            Name = "Inactive"
                        },
                        new
                        {
                            StatusId = 3,
                            Description = "Asset under repair or servicing",
                            Name = "Under Maintenance"
                        },
                        new
                        {
                            StatusId = 4,
                            Description = "No longer in service",
                            Name = "Retired"
                        });
                });

            modelBuilder.Entity("Asset.Models.Consumable", b =>
                {
                    b.Property<int>("ConsumableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsumableId"));

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastOrderedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("MinimumStockLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PartNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<int?>("ReorderQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Supplier")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UnitOfMeasure")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ConsumableId");

                    b.ToTable("Consumables");

                    b.HasData(
                        new
                        {
                            ConsumableId = 1,
                            Category = "Printer Supplies",
                            CreatedAt = new DateTime(2025, 10, 18, 18, 40, 40, 92, DateTimeKind.Utc).AddTicks(9113),
                            IsActive = true,
                            Manufacturer = "HP",
                            MinimumStockLevel = 5,
                            Name = "HP LaserJet Toner Cartridge",
                            PartNumber = "CF410A",
                            QuantityInStock = 15,
                            ReorderQuantity = 10,
                            UnitOfMeasure = "Each",
                            UnitPrice = 89.99m
                        },
                        new
                        {
                            ConsumableId = 2,
                            Category = "Cables",
                            CreatedAt = new DateTime(2025, 10, 18, 18, 40, 40, 92, DateTimeKind.Utc).AddTicks(9421),
                            IsActive = true,
                            MinimumStockLevel = 10,
                            Name = "USB-C to HDMI Cable",
                            PartNumber = "USB-C-HDMI-6FT",
                            QuantityInStock = 25,
                            ReorderQuantity = 20,
                            UnitOfMeasure = "Each",
                            UnitPrice = 12.99m
                        },
                        new
                        {
                            ConsumableId = 3,
                            Category = "Peripherals",
                            CreatedAt = new DateTime(2025, 10, 18, 18, 40, 40, 92, DateTimeKind.Utc).AddTicks(9424),
                            IsActive = true,
                            Manufacturer = "Logitech",
                            MinimumStockLevel = 15,
                            Name = "Wireless Mouse",
                            PartNumber = "MX-MASTER-3",
                            QuantityInStock = 8,
                            ReorderQuantity = 20,
                            UnitOfMeasure = "Each",
                            UnitPrice = 59.99m
                        });
                });

            modelBuilder.Entity("Asset.Models.Software", b =>
                {
                    b.Property<int>("SoftwareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoftwareId"));

                    b.Property<string>("Category")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LicenseKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LicenseType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LicensesInUse")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("NumberOfLicenses")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("RenewalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Supplier")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SupportContact")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Vendor")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Version")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SoftwareId");

                    b.ToTable("Software");

                    b.HasData(
                        new
                        {
                            SoftwareId = 1,
                            Category = "Office Suite",
                            CreatedAt = new DateTime(2025, 10, 18, 18, 40, 40, 92, DateTimeKind.Utc).AddTicks(6151),
                            IsActive = true,
                            LicenseType = "Subscription",
                            LicensesInUse = 75,
                            Name = "Microsoft Office 365",
                            NumberOfLicenses = 100,
                            Vendor = "Microsoft",
                            Version = "2024"
                        },
                        new
                        {
                            SoftwareId = 2,
                            Category = "Operating System",
                            CreatedAt = new DateTime(2025, 10, 18, 18, 40, 40, 92, DateTimeKind.Utc).AddTicks(6334),
                            IsActive = true,
                            LicenseType = "Volume",
                            LicensesInUse = 150,
                            Name = "Windows 11 Pro",
                            NumberOfLicenses = 200,
                            Vendor = "Microsoft",
                            Version = "23H2"
                        },
                        new
                        {
                            SoftwareId = 3,
                            Category = "Design Software",
                            CreatedAt = new DateTime(2025, 10, 18, 18, 40, 40, 92, DateTimeKind.Utc).AddTicks(6337),
                            IsActive = true,
                            LicenseType = "Subscription",
                            LicensesInUse = 18,
                            Name = "Adobe Creative Cloud",
                            NumberOfLicenses = 20,
                            Vendor = "Adobe",
                            Version = "2024"
                        });
                });

            modelBuilder.Entity("Asset.Models.hdAssetHistory", b =>
                {
                    b.Property<int>("HistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryID"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AssetID")
                        .HasColumnType("int");

                    b.Property<string>("AssignedToUser")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AttachmentPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FromLocation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("FromStatusId")
                        .HasColumnType("int");

                    b.Property<string>("FromUser")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PerformedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReturnReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SparePart")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SparePartSerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToLocation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ToStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ToUser")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("HistoryID");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("AssetID");

                    b.HasIndex("FromStatusId");

                    b.HasIndex("ToStatusId");

                    b.ToTable("AssetHistories");
                });

            modelBuilder.Entity("Asset.Models.hdAssetTypes", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeID");

                    b.ToTable("AssetTypes");

                    b.HasData(
                        new
                        {
                            TypeID = 1,
                            Name = "Laptop"
                        },
                        new
                        {
                            TypeID = 2,
                            Name = "DeskTop"
                        },
                        new
                        {
                            TypeID = 3,
                            Name = "Server"
                        });
                });

            modelBuilder.Entity("Asset.Models.hdAssets", b =>
                {
                    b.Property<int>("AssetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Monitor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Printer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Processor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RAM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Storage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supplier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("WarrantyExpirationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AssetID");

                    b.HasIndex("ComputerName");

                    b.HasIndex("SerialNumber");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeID");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Asset.Models.hdAssetHistory", b =>
                {
                    b.HasOne("Asset.Models.AssetActionType", "ActionType")
                        .WithMany("Histories")
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Asset.Models.hdAssets", "Asset")
                        .WithMany("History")
                        .HasForeignKey("AssetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asset.Models.AssetStatus", "FromStatus")
                        .WithMany()
                        .HasForeignKey("FromStatusId");

                    b.HasOne("Asset.Models.AssetStatus", "ToStatus")
                        .WithMany()
                        .HasForeignKey("ToStatusId");

                    b.Navigation("ActionType");

                    b.Navigation("Asset");

                    b.Navigation("FromStatus");

                    b.Navigation("ToStatus");
                });

            modelBuilder.Entity("Asset.Models.hdAssets", b =>
                {
                    b.HasOne("Asset.Models.AssetStatus", "Status")
                        .WithMany("Assets")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Asset.Models.hdAssetTypes", "hdAssetTypes")
                        .WithMany("Assets")
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Status");

                    b.Navigation("hdAssetTypes");
                });

            modelBuilder.Entity("Asset.Models.AssetActionType", b =>
                {
                    b.Navigation("Histories");
                });

            modelBuilder.Entity("Asset.Models.AssetStatus", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("Asset.Models.hdAssetTypes", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("Asset.Models.hdAssets", b =>
                {
                    b.Navigation("History");
                });
#pragma warning restore 612, 618
        }
    }
}
